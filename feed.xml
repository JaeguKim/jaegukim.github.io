<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jaegukim.github.io/</id><title>Study Log</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-10-22T08:35:47+08:00</updated> <author> <name>Jaegoo.Kim</name> <uri>https://jaegukim.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jaegukim.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://jaegukim.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Jaegoo.Kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Software Engineering at Google</title><link href="https://jaegukim.github.io/posts/software-engineering-at-google/" rel="alternate" type="text/html" title="Software Engineering at Google" /><published>2023-10-02T19:12:00+08:00</published> <updated>2023-10-22T08:34:37+08:00</updated> <id>https://jaegukim.github.io/posts/software-engineering-at-google/</id> <content src="https://jaegukim.github.io/posts/software-engineering-at-google/" /> <author> <name>Jaegoo.Kim</name> </author> <category term="Study" /> <summary> 챕터1 Time and Change Software를 장기적으로 유지보수가능하게 하는 작업은 지속적인 전투(constant battle)이다. Hyrum’s Law API의 충분한 사용자가 있는 경우, 주어진 계약에서 무엇을 약속하는지는 중요하지 않다. : 모든 관찰가능한 당신의 시스템의 행위가 다른 누군가에 의해 의존될 것이다. 엔트로피의 법칙이 참이지만, 계속 무질서도를 낮출려고 해야하듯이 우리가 개발한 API도 언젠가는 유저의 어플리케이션을 break할것이지만 API에 대한 변화가 그러한 breakage를 해결하고 식별하고 조사하는 어려움을 고려했을때 가치가 있어야한다. Programming의 관점에서는 clever는 칭찬이지만, Software Engineering 관... </summary> </entry> <entry><title>Finance TIL</title><link href="https://jaegukim.github.io/posts/finance-til/" rel="alternate" type="text/html" title="Finance TIL" /><published>2023-03-05T13:07:00+08:00</published> <updated>2023-03-05T13:07:00+08:00</updated> <id>https://jaegukim.github.io/posts/finance-til/</id> <content src="https://jaegukim.github.io/posts/finance-til/" /> <author> <name>Jaegoo.Kim</name> </author> <category term="Finance" /> <summary> 2023-03-05 leverage : 부채를 갖고 하는 투자 stable coin : 가격 변동서어을 최소화하도록 설계된 암호화폐, 1달러를 예금할 경우 1코인을 발행해줌으로써 암호화폐의 1대 1가치를 유지하며, 이를 pegging 이라고 말한다. </summary> </entry> <entry><title>Effective Go</title><link href="https://jaegukim.github.io/posts/effective-go/" rel="alternate" type="text/html" title="Effective Go" /><published>2023-02-27T10:37:00+08:00</published> <updated>2023-02-27T10:37:00+08:00</updated> <id>https://jaegukim.github.io/posts/effective-go/</id> <content src="https://jaegukim.github.io/posts/effective-go/" /> <author> <name>Jaegoo.Kim</name> </author> <category term="Language" /> <category term="Go" /> <summary> Package name은 lower case, single-word names; there should be no need for underscores or mixedCaps Getters : Get을 prefix로 붙이지 않는다. Setter의 경우는 Set을 prefix로 붙일수 있다. Interface Names one-method interface의 경우 함수명 + er 로 명명한다. Read,Write,Close,Flush,String 등의 시그니쳐는 well-known type의 메소드와 동일한 의미를 지니고 있지 않다면 피한다. rune 이란 single Unicode code point에 대한 Go terminology이다. ... </summary> </entry> <entry><title>9 Password Storage Best Practices</title><link href="https://jaegukim.github.io/posts/9-password-storage-best-practices/" rel="alternate" type="text/html" title="9 Password Storage Best Practices" /><published>2022-11-08T15:50:00+08:00</published> <updated>2022-11-08T15:50:00+08:00</updated> <id>https://jaegukim.github.io/posts/9-password-storage-best-practices/</id> <content src="https://jaegukim.github.io/posts/9-password-storage-best-practices/" /> <author> <name>Jaegoo.Kim</name> </author> <category term="Security" /> <summary> 9 Password Storage Best Practices Protect your databases and containers : DB나 컨테이너에 대한 접근을 보호 Hash all passwords : hash는 encryption key가 없으므로 원문으로 되돌릴수 없다. Use a strong hash function Salt your passwords : 원문 password에 랜덤스트링(salt)를 추가하여 해싱하라. 이때 원문 password와 salted password 간의 맵핑은 원격 저장소에 저장한다. 이 방법으 같은 패스워드라도 다르게 만들수 있다. Pepper your password : 4... </summary> </entry> <entry><title>TIL</title><link href="https://jaegukim.github.io/posts/til/" rel="alternate" type="text/html" title="TIL" /><published>2022-09-13T13:17:00+08:00</published> <updated>2023-09-28T08:34:08+08:00</updated> <id>https://jaegukim.github.io/posts/til/</id> <content src="https://jaegukim.github.io/posts/til/" /> <author> <name>Jaegoo.Kim</name> </author> <category term="Study" /> <summary> 2022-09-13 new(T) vs Make(T) new(T) allocates zeroed storage for a new item of type T and returns its address as a value of type *T make(T) returns an initialized value of type T. For slices, maps and channels: use make For arrays, structs and all value types: use new Go Best practices value type에 대한 pointer를 misuse하지 말기, 이는 stack에 있는 값을 hea... </summary> </entry> </feed>
